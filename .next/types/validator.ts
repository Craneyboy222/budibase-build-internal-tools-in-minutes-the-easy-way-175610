// This file is generated automatically by Next.js
// Do not edit this file manually
// This file validates that all pages and layouts export the correct types

import type { AppRoutes, LayoutRoutes, ParamMap } from "./routes.js"
import type { ResolvingMetadata, ResolvingViewport } from "next/dist/lib/metadata/types/metadata-interface.js"

type AppPageConfig<Route extends AppRoutes = AppRoutes> = {
  default: React.ComponentType<{ params: Promise<ParamMap[Route]> } & any> | ((props: { params: Promise<ParamMap[Route]> } & any) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type PagesPageConfig = {
  default: React.ComponentType<any> | ((props: any) => React.ReactNode | Promise<React.ReactNode> | never | void)
  getStaticProps?: (context: any) => Promise<any> | any
  getStaticPaths?: (context: any) => Promise<any> | any
  getServerSideProps?: (context: any) => Promise<any> | any
  getInitialProps?: (context: any) => Promise<any> | any
  /**
   * Segment configuration for legacy Pages Router pages.
   * Validated at build-time by parsePagesSegmentConfig.
   */
  config?: {
    amp?: boolean | 'hybrid' | string // necessary for JS
    maxDuration?: number
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    regions?: string[]
  }
}

type LayoutConfig<Route extends LayoutRoutes = LayoutRoutes> = {
  default: React.ComponentType<LayoutProps<Route>> | ((props: LayoutProps<Route>) => React.ReactNode | Promise<React.ReactNode> | never | void | Promise<void>)
  generateStaticParams?: (props: { params: ParamMap[Route] }) => Promise<any[]> | any[]
  generateMetadata?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingMetadata
  ) => Promise<any> | any
  generateViewport?: (
    props: { params: Promise<ParamMap[Route]> } & any,
    parent: ResolvingViewport
  ) => Promise<any> | any
  metadata?: any
  viewport?: any
}

type ApiRouteConfig = {
  default: (req: any, res: any) => Promise<void> | void | Promise<Response> | Response
  config?: {
    api?: {
      bodyParser?: boolean | { sizeLimit?: string }
      responseLimit?: string | number
      externalResolver?: boolean
    }
    runtime?: 'edge' | 'experimental-edge' | 'nodejs' | string // necessary unless config is exported as const
    maxDuration?: number
  }
}


// Validate ../../src/app/items/new/page.tsx
{
  const handler = {} as typeof import("../../src/app/items/new/page.js")
  handler satisfies AppPageConfig<"/items/new">
}

// Validate ../../src/app/items/page.tsx
{
  const handler = {} as typeof import("../../src/app/items/page.js")
  handler satisfies AppPageConfig<"/items">
}

// Validate ../../src/app/page.tsx
{
  const handler = {} as typeof import("../../src/app/page.js")
  handler satisfies AppPageConfig<"/">
}



// Validate ../../src/pages/404.tsx
{
  const handler = {} as typeof import("../../src/pages/404.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/500.tsx
{
  const handler = {} as typeof import("../../src/pages/500.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/admin.tsx
{
  const handler = {} as typeof import("../../src/pages/admin.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/admin/analytics.tsx
{
  const handler = {} as typeof import("../../src/pages/admin/analytics.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/admin/orders.tsx
{
  const handler = {} as typeof import("../../src/pages/admin/orders.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/admin/products.tsx
{
  const handler = {} as typeof import("../../src/pages/admin/products.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/admin/users.tsx
{
  const handler = {} as typeof import("../../src/pages/admin/users.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/categories.tsx
{
  const handler = {} as typeof import("../../src/pages/categories.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/categories/[id].tsx
{
  const handler = {} as typeof import("../../src/pages/categories/[id].js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/dashboard.tsx
{
  const handler = {} as typeof import("../../src/pages/dashboard.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/login.tsx
{
  const handler = {} as typeof import("../../src/pages/login.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/orders.tsx
{
  const handler = {} as typeof import("../../src/pages/orders.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/orders/[id].tsx
{
  const handler = {} as typeof import("../../src/pages/orders/[id].js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/products.tsx
{
  const handler = {} as typeof import("../../src/pages/products.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/products/[id].tsx
{
  const handler = {} as typeof import("../../src/pages/products/[id].js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/profile.tsx
{
  const handler = {} as typeof import("../../src/pages/profile.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/register.tsx
{
  const handler = {} as typeof import("../../src/pages/register.js")
  handler satisfies PagesPageConfig
}

// Validate ../../src/pages/api/admin.ts
{
  const handler = {} as typeof import("../../src/pages/api/admin.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/auth.ts
{
  const handler = {} as typeof import("../../src/pages/api/auth.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/categories.ts
{
  const handler = {} as typeof import("../../src/pages/api/categories.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/items.ts
{
  const handler = {} as typeof import("../../src/pages/api/items.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/orders.ts
{
  const handler = {} as typeof import("../../src/pages/api/orders.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/products.ts
{
  const handler = {} as typeof import("../../src/pages/api/products.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/pages/api/users.ts
{
  const handler = {} as typeof import("../../src/pages/api/users.js")
  handler satisfies ApiRouteConfig
}

// Validate ../../src/app/layout.tsx
{
  const handler = {} as typeof import("../../src/app/layout.js")
  handler satisfies LayoutConfig<"/">
}
